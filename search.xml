<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客插入图片</title>
      <link href="/2021/09/14/%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2021/09/14/%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>算是当时建站留下的一点坑，博客一直没有插入图片的功能，这对于显示当然及其不友好。这学期我转用markdown进行课堂笔记，最近突发奇想想将笔记转移到博客上，这样的话没有图片肯定是不行的，于是稍微折腾了一下。</p><span id="more"></span><p>其实网上比较推荐的做法是使用“七牛”等网络图床，网络存图有好处也有缺点，我想还是用本地方案得了，遂放弃（才不是懒得研究）<br>本地方案其实也不难，按照<a href="https://hexo.io/zh-cn/docs/">hexo的官方文档</a>来做十分容易，核心如下：<br><img src="博客插入图片/2021-09-14-19-29-24.png" alt=""><br>其实就是全局配置打开资源文件夹，然后用一些特定格式加入图片就行，markdown自带的插入图片格式也是可以用的，虽然官方说有些缺点。</p><p>问题在于为了做课堂笔记，想要插入图片必须要快速高效，因此需要使粘贴插图的默认位置在资源文件夹中。使用markdown all in one的默认位置使./image/[post_name]/pic_name，这样显然不行，仔细寻找了markdown all in one的设置也没有设置图片位置的方法，于是只能用其他方法来做到。<br>网上找到了一些方法，最后发现<a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste Image</a>插件比较符合我的需求，可以按相对位置插入图片，也可以改变图片存储位置，只是粘贴的快捷键需要使用CTRL+ALT+V，稍微麻烦，但无伤大雅。<br><img src="博客插入图片/2021-09-14-19-37-33.png" alt=""></p><p>不算什么有用的文章，仅作记录。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习记录</title>
      <link href="/2021/09/14/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/09/14/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>暑假前我曾经用了一天的时间学习git和github的使用，为了练习在暑假第一周我把大学作业中勉强称得上是项目的东西传到了github上并借助gitpages配置了本blog。本想着git算是学会了，可惜暑假并没有及时进行练习，当我想上传数据结构课设作业时发现该忘的都忘记了，记性不好吗，看来还是有必要记录一下。</p><span id="more"></span><h4 id="git-clone和download-zip区别"><a href="#git-clone和download-zip区别" class="headerlink" title="git clone和download zip区别"></a>git clone和download zip区别</h4><p>前者带一个.git，是一个仓库，也就是带有一些版本控制</p><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>对于初始项目目录，使用git init初始化为git仓库</p><h4 id="git-add-A"><a href="#git-add-A" class="headerlink" title="git add -A"></a>git add -A</h4><p>将所有文件添加到暂存区<br>可用vscode左边点”+”实现</p><h4 id="vscode的U-A"><a href="#vscode的U-A" class="headerlink" title="vscode的U/A"></a>vscode的U/A</h4><p>U:表示是新增文件<br>A:到达暂存区</p><h4 id="git-commit-m-“提交信息”"><a href="#git-commit-m-“提交信息”" class="headerlink" title="git commit -m “提交信息”"></a>git commit -m “提交信息”</h4><p>提交暂存，每次提交有位移hash值，并用提交信息提醒这次提交了什么<br>可用vscode插件输入提交信息ctrl+enter实现</p><h4 id="git-log-—stat"><a href="#git-log-—stat" class="headerlink" title="git log —stat"></a>git log —stat</h4><p>查看提交记录<br>可直接在vscode插件COMMITS中查看</p><h4 id="git-checkout-filename"><a href="#git-checkout-filename" class="headerlink" title="git checkout [filename]"></a>git checkout [filename]</h4><p>未提交时撤销修改，变为仓库中的状态<br>可在vscode插件中点放弃修改实现</p><h4 id="git-reset-HEAD-m"><a href="#git-reset-HEAD-m" class="headerlink" title="git reset HEAD^[m]"></a>git reset HEAD^[m]</h4><p>退回到第前m个版本<br>可用COMMITS里undo commit做到</p><h4 id="git-checkout-b-branchname"><a href="#git-checkout-b-branchname" class="headerlink" title="git checkout -b [branchname]"></a>git checkout -b [branchname]</h4><p>以当前分支为基础创建分支并切换到该分支<br>主分支一般是代码的起点和终点</p><h4 id="git-checkout-branchname"><a href="#git-checkout-branchname" class="headerlink" title="git checkout [branchname]"></a>git checkout [branchname]</h4><p>切换分支</p><h4 id="git-merge-branchname"><a href="#git-merge-branchname" class="headerlink" title="git merge [branchname]"></a>git merge [branchname]</h4><p>把[branchname]分支合并到当前分支</p><h4 id="git-merge-—abort"><a href="#git-merge-—abort" class="headerlink" title="git merge —abort"></a>git merge —abort</h4><p>放弃本次合并</p><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><p>查看本地所有分支<br>*是当前分支</p><h4 id="git-branch-r"><a href="#git-branch-r" class="headerlink" title="git branch -r"></a>git branch -r</h4><p>查看远程所有分支</p><h4 id="git-branch-a"><a href="#git-branch-a" class="headerlink" title="git branch -a"></a>git branch -a</h4><p>查看本地和远程所有分支</p><h4 id="git-branch-d-D-branchname"><a href="#git-branch-d-D-branchname" class="headerlink" title="git branch -d/D [branchname]"></a>git branch -d/D [branchname]</h4><p>删除分支，其中D是强制删除</p><h4 id="git-remote-add-origin-远端仓库地址"><a href="#git-remote-add-origin-远端仓库地址" class="headerlink" title="git remote add origin [远端仓库地址]"></a>git remote add origin [远端仓库地址]</h4><p>把远端仓库作为”origin”名添加到本地中</p><h4 id="git-branch-m-M-oldbranchname-newbranchname"><a href="#git-branch-m-M-oldbranchname-newbranchname" class="headerlink" title="git branch -m/M [oldbranchname] [newbranchname]"></a>git branch -m/M [oldbranchname] [newbranchname]</h4><p>修改分支名字，M是强制修改<br>可以只有[newbranchname]，修改当前分支<br>常用git branch -M main解决github上main和master的冲突</p><h4 id="git-push-u-remoteoriginname-localoriginname"><a href="#git-push-u-remoteoriginname-localoriginname" class="headerlink" title="git push (-u) [remoteoriginname] ([localoriginname])"></a>git push (-u) [remoteoriginname] ([localoriginname])</h4><p>推送到远程仓库<br>常用git push -u origin main<br>[localoriginname]省略则为当前分支<br>其中-u用来绑定远程主机，之后就可以简写为git push和git pull而不用指定origin<br><!-- ![](1631595461467.png) --><br><img src="/2021/09/14/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1631595461467.png" class="" title="[知乎大佬的解释]"><br><!-- > `$ git push origin`上面命令表示，将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。`$ git push`如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。`$ git push -u origin master`上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 --></p><h4 id="git-pull-—rebase-remoteoriginname-localoriginname"><a href="#git-pull-—rebase-remoteoriginname-localoriginname" class="headerlink" title="git pull (—rebase) [remoteoriginname] ([localoriginname])"></a>git pull (—rebase) [remoteoriginname] ([localoriginname])</h4><p>拉取远程分支内容<br>—rebase作用参考<a href="https://blog.csdn.net/yao_hou/article/details/108178717">这篇文章</a><br>其实就是git pull不在当前合并出新节点，而是在分支出来的结点进行合并并修改之后的结点<br>用来解决github新仓库第一次提交失败的问题</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匹配</title>
      <link href="/2021/08/12/%E5%8C%B9%E9%85%8D/"/>
      <url>/2021/08/12/%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="一点废话"><a href="#一点废话" class="headerlink" title="一点废话"></a>一点废话</h3><p>一直以来都没有太搞懂匹配，遇到别人眼里一眼出的匹配问题也经常看不懂，想想高中研究匹配的时候似乎就没吃透，导致现在还是有漏洞，这次详细研究一下，记录一点新的理解</p><span id="more"></span><h5 id="最大匹配"><a href="#最大匹配" class="headerlink" title="最大匹配"></a>最大匹配</h5><p>匹配数量最多的情况</p><h5 id="最优匹配-完美匹配"><a href="#最优匹配-完美匹配" class="headerlink" title="最优匹配/完美匹配"></a>最优匹配/完美匹配</h5><p>二分图中每个点都能匹配的情况。之前总是最大匹配最优匹配傻傻分不清</p><h5 id="交替路"><a href="#交替路" class="headerlink" title="交替路"></a>交替路</h5><p>从一个非匹配点出发，依次经过非匹配边、匹配边、非匹配边……形成的路径叫做交替路。</p><h5 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h5><p>经过另一个非匹配点的交替路。因此增广路中匹配边总是比非匹配边多1，取反后可以增加匹配数量。</p><h5 id="深度优先-广度优先"><a href="#深度优先-广度优先" class="headerlink" title="深度优先/广度优先"></a>深度优先/广度优先</h5><p><strong>深度优先：</strong>匹配冲突立刻找增广路，见的比较多。<br><strong>广度优先：</strong>匹配冲突先看有没有其他可行匹配，都不行再用增广路。</p><h5 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h5><p>用来求带权二分图最大匹配问题，主要参考了<a href="https://blog.csdn.net/qq_37457202/article/details/80161274">这篇博客</a>，理解之后发现复杂度相当暴力，看来不可避免需要继续学习其他高级算法。<br>例题：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=2255">HDU2255</a></p><p>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x) memset(x, 0, sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">309</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> lx[N], ly[N], link[N], slack[N], vsx[N], vsy[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vsx[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vsy[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> temp = lx[x] + ly[i] - a[x][i];</span><br><span class="line"><span class="keyword">if</span> (!temp)</span><br><span class="line">&#123;</span><br><span class="line">vsy[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!link[i] || <span class="built_in">dfs</span>(link[i]))</span><br><span class="line">&#123;</span><br><span class="line">link[i] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">slack[i] = <span class="built_in">min</span>(slack[i], temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KM</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">clr</span>(lx);</span><br><span class="line"><span class="built_in">clr</span>(ly);</span><br><span class="line"><span class="built_in">clr</span>(link);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line">lx[i] = <span class="built_in">max</span>(a[i][j], lx[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(slack, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(slack));</span><br><span class="line"><span class="comment">// for (int j = 1; j &lt;= n; ++j)</span></span><br><span class="line"><span class="comment">// slack[j] = INF;</span></span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">clr</span>(vsx);</span><br><span class="line"><span class="built_in">clr</span>(vsy);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dfs</span>(i))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> dlt = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!vsy[j])</span><br><span class="line">dlt = <span class="built_in">min</span>(dlt, slack[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vsx[j])</span><br><span class="line">lx[j] -= dlt;</span><br><span class="line"><span class="keyword">if</span> (vsy[j])</span><br><span class="line">ly[j] += dlt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">res += lx[i] + ly[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">KM</span>(n));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记暑期第一场CF</title>
      <link href="/2021/07/23/%E8%AE%B0%E6%9A%91%E6%9C%9F%E7%AC%AC%E4%B8%80%E5%9C%BACF/"/>
      <url>/2021/07/23/%E8%AE%B0%E6%9A%91%E6%9C%9F%E7%AC%AC%E4%B8%80%E5%9C%BACF/</url>
      
        <content type="html"><![CDATA[<p>昨天晚上的CF是昆明站以来第一次摸算法的东西(学校的算法课配叫算法？)，想法是借着这次CF回复一下竞赛状态，事实证明我的竞赛状态确实是一塌糊涂。打完后已经是凌晨一点多了，想想还是不总结记录了，于是把记录留到了今天。</p><span id="more"></span><p>首先出师不利，我竟然忘记了赛前register，只好等比赛开始10分钟后的extra register，直接丧失了赛处最珍贵的10分钟。比赛开始后，<a href="https://codeforces.com/problemset/problem/1553/A">A题</a>一如既往是大水题，秒过，但是由于不熟悉了在写代码时速度实在不算快。就在我以为自己竞赛状态竟然还有不少保留时，第二题直接打脸。<br>讲真我在写A题时，<a href="https://codeforces.com/problemset/problem/1553/B">B题</a>就已经有了一个说明通知，但由于我没看B题因此没有特别注意，结果第二题我没想到去看通知，一上来就理解错了，第一发写了一个奇葩的乱搞思路，白给。然后我就思考是怎么回事，这时才突然记起来那个通知，快速扫了一眼，知道自己提议理解错了，于是赶快重新构思并写代码。实际上B题就是一个朴素的三层循环(分别枚举起点、转折点、终点)，码完后过了样例，一交又不对，呜呜。调了一会，陆续找到了几个看起来有问题但是实际上应该不会有影响的小问题，改完后结果不变，心态崩了，弃疗。</p><p><a href="https://codeforces.com/problemset/problem/1553/C">C题</a>第一遍读题竟然没看懂，大慌，心想完了完了我不会只能签到吧……镇定下来重读一遍，总算是看懂了，快速码完并简单调试了一下，过了，心情大好。</p><p><a href="https://codeforces.com/problemset/problem/1553/D">D题</a>还是挺有意思的，乍一看似乎和B是同一个人出的。第一遍看下来感觉就是用s串去匹配t串的每一个，并考虑两个匹配字符之间相隔的字符数是否为偶数个，若是则匹配t的下一个字符。但是这个贪心思路明显是$O(n)$的，但是题目数据量看似在向$O(logn)$引导。算了，先写一发吧，写完后只剩3分钟了(前面浪费时间太多了，呜呜)，一试竟然过不了样例，大崩。这时候我突然想到我那个思路确实正着匹配是错的，但是按照题目中backspace的特性，似乎倒着匹配就是正确的？赶紧改，结果最后改完后时间还是到了，难受。</p><p>结束后一段时间不让提交，也没法验证D是否正确。对着电脑发了一会呆，感觉挺难受的，最后试了一遍还是不能交，想想还是先睡觉了。</p><p>没想到的是，今早晨起来，博宇哥说我B其实就是数组开小了，我一看，甚惊之，哭笑不得，一改遂过，难受了，舒服了……D题一交也是过了，这么说我昨天至少思路上四道题都是对的，可惜太久不做码力大降，加上时间分配不合理，最终抱憾两题，坐等掉大分。</p><p>不过想想好处也是有的，至少我感觉我的英语水平还是有所提升，读英文题目没有半年前那种浑身难受看不懂总想翻译的感觉了；顺便这么久没练做成这样倒也正常，叶神他们也不能一直保持状态，更别提一直划水的我了……</p><p>后面几题想想还是要补的，最后一年ACM了，虽说是一年但也就两三场比赛了，总要拼一下，大学生涯总不能一直炼铜(非恶意)啊……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客——测试+哔哔赖赖</title>
      <link href="/2021/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95-%E5%93%94%E5%93%94%E8%B5%96%E8%B5%96/"/>
      <url>/2021/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95-%E5%93%94%E5%93%94%E8%B5%96%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p>今天在高铁上，我终于完成了基于github pages的blog搭建，说实话从有想搭博客的想法已经很久了，直到最近才越来越感觉真的需要记录点东西，正好趁着假期研究了下git的使用(之前一直没搞明白属实惭愧)，于是趁热打铁利用github pages搭建了一个博客。正好赶上回家，感觉有许多想法想要记录下来，趁着年轻，就应该多留下点想法。</p><span id="more"></span> <h3 id="为什么要写博客？"><a href="#为什么要写博客？" class="headerlink" title="为什么要写博客？"></a>为什么要写博客？</h3><p>虽说不是什么事都要刨根问底问个为什么，但是写博客倒是确实需要一个明确的理由，毕竟现在已经不是博客的时代了，博客不再拥有大量的读者，也不像微博等当代社交方式便捷。那么我为什么要写博客呢？<br>一个原因是想记录自己学习技术的过程。就像很多计算机技术大牛那样，我想用博客记录一下自己学习过程中的一点点收获与思想。我在大二下这学期也明显感受到了自己所学的许多东西如果不经记录很快就会被忘记，因此确实有必要记录下来，至少可以起到备查的作用，如果能帮到其他有同样学习经历的人我更是感到十分荣幸，同时记录的过程也是对所学的一种总结，有利于更好地归纳总结所学。<br>另一个非常重要的原因就是想要通过博客与自己的内心进行一种“对话”，这也是我为什么将博客名暂定为”Soul Talk”。其实一直以来我废话都挺多的，至少心里有什么想法大多数时候都希望找个人分享一下，一般我都是通过打电话和家里分享或是告诉身边的朋友，但是这学期真的许多事似乎只适合和自己说，或是找到某种“灵魂伴侣”；当然若是能有红颜知己再好不过，但我懂得还是要放弃幻想认清形势。写博客其实就是和自己对话的过程，在高中时尽管平时学习压力并不小，但我还是喜欢闲下来的时候，写一点日记记录一下，到大学后不知道为何反而丢弃了记日记的习惯；另一方面，上大学后真的很少写字了，现在我这赖字写日记真的是自己看了都嫌弃，那就干脆用博客代替吧……</p><h3 id="下一步做什么？"><a href="#下一步做什么？" class="headerlink" title="下一步做什么？"></a>下一步做什么？</h3><p>其实为啥写博客想清楚了，下一步干什么也就明白了。平时学习技术的时候开个md记录一下，有想说的就当日记记录一下，不求真的有读者，更重要的还是写给自己吧。<br>另外其实利用github pages搭建博客真的挺简单的，但我为了美化还是花了一些时间，不得不说这个next主题我个人感觉目前还是挺丑挺简陋的，未来肯定还要进一步美化，毕竟界面美了我才更有动力写下去嘛……</p><h3 id="第一篇博客还有啥想说的"><a href="#第一篇博客还有啥想说的" class="headerlink" title="第一篇博客还有啥想说的"></a>第一篇博客还有啥想说的</h3><p>还想bb点这学期的事……高铁上我用电脑做了些事导致没电了，后期除了一段水群的时间，大概是考虑了一下这学期的一些事。<br>首先最大的好消息是满绩了，虽然一个虚无的数字对我已经不再有那么大的意义了，毕竟保研无望，但是这至少还是证明了自己其实并没有差多少。这学期我真的是一步一赌，步步惊心，31.5的学分量不管怎么说都给我带来了巨大的课业压力。为什么要选那么多课呢？因为当时感觉反正保研不可能了，不如干脆提前学一下大三的内容，到时候好抽出时间准备考研或出国，能够满绩是我完全没想到的。这学期其实有好几个之前和我绩点相近的同学都在努力证明自己，大概是周一没有重视导致现在绩点不太好看吧，就想着这学期努力证明一次，看看自己是不是真的比不上那些专业前列的大佬，也都取得了不错的结果。讲真我是没有这种想法的，毕竟我的学分量摆在那里，我只是努力走好每一步，渴望“活下去”。<br>那我究竟为什么竟能顶着如此大的压力达到满绩呢？一方面，有我自己努力的结果。期末复习时，我和同学说我每一科只需要两小时的复习时间，这虽然有所夸张，但是这学期我所有的考试确实都只复习了半天时间，一方面是我确实被一堆作业压迫着不得不缩减复习时间，另一方面这学期许多课我都是每次上完课及时通过看ppt熟悉了课程内容，而不是把复习压力全部堆到期末，这样期末复习时我就是在回忆而不是许多人调侃的“预习”，速度自然快。另一方面，更重要的就是许多朋友对我的帮助。在计网作业我几乎崩溃的时候，是waq和ymy对我提供了许多及时而有效的帮助；在DSP搞得我自闭时，是bcc和ljj给我指明了方向；在自动机、计组和人工智能因为我被作业压迫没有听课自己课下补课看不懂时，是gzc与我进行了许多理论方面的交流并给了我许多理解上的帮助，尤其是最后计组CPU54的实验，多亏gzc的提醒我才能避开许多坑成功完成了本学期最后的任务。真的真的非常感谢各位朋友的帮助，多亏了你们，才能让我成功活过了这个任务繁重的学期！同时我也认识到，只有大家抱团取暖，才能一起共度难关！</p><p>另外这学期的一大坏消息就是感情上的大失败。说是失败其实也没啥，还是自己格局小了。想了想还是不bb这里了，把悲伤留给自己吧。</p><p>想来这学期总算是结束了，虽然小学期还有两个课设和一点日记需要完成，但是大风大浪算是过去了。这学期我收获还蛮多的，我发现，之前大概是受my和by等熟悉学长的影响，我把较多精力花在了“用”上，但是经过大二的学习与不断的思考，我认为我们计算机科班与技校生的区别并不在于谁会不会用，而在于谁基础扎实，能够更快的适应；也就是说，相比于使用语言等工具，我感觉到基础扎实、原理透彻是很重要也很容易被忽视的。就比如这学期的人工智能课程项目，被很多学长吐槽为“没用”，是的，从项目本身来说，我们做的八数码、五子棋啥的确实没用，甚至不屑于写到简历中，同时我们使用的都是比较传统的基于搜索的方法，那么这个就真的没用了吗？非也，通过人工智能课程的学习和大作业的完成，我对于人工智能的基本原理有了真正的认识，而这才是这门课的真正目的。懂得了搜索的原理之后，再去实现无疑简单得多，我只是用语言工具描述一下就可以了，甚至基于先前对C++语言较为系统的学习和较深入的理解，我再学习js等工具时只需要花费很少的力气就可以轻松学会了，并能够立刻使用其完成五子棋web开发，这无疑比技校生、培训班高明得多。值得一提的是，计组的CPU编写也是这个道理。</p><p>经过这学期的深思熟虑，我最终还是决定要出国读研，那么这个假期就要好好地准备起来，但是假期我又有ICPC竞赛训练、数模模拟赛、国创项目等一堆棘手的事情需要去做，同时还要准备语言考试，终归不是个轻松的假期，唉。</p><p>bb结束，明天就正式开启假期吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/20/hello-world/"/>
      <url>/2021/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
